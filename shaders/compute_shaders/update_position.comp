#version 430 core

layout (local_size_x = 1024, local_size_y = 1, local_size_z = 1) in;

// ----------------------------------------------------------------------------
//
// uniforms
//
// ----------------------------------------------------------------------------

struct Particle {
	vec3 position;
	vec3 predicted_position;
	vec3 velocity;
};

struct Colour {
	vec3 colour;
};

layout(std430, binding = 0) buffer ParticleBuffer {
    Particle particles[];
};

layout(std430, binding = 6) buffer ColourBuffer {
    Colour colours[];
};

layout(std430, binding = 7) buffer ColourMapBuffer {
    Colour speedmap[];
};

uniform float delta_time;
uniform float half_width;
uniform float half_height;
uniform float half_depth;
uniform float grid_sphere_radius;
uniform float damping_factor;


// ----------------------------------------------------------------------------
//
// functions
//
// ----------------------------------------------------------------------------


void main() {
	uint id = gl_GlobalInvocationID.x;

	particles[id].position += particles[id].velocity * delta_time;
	
	if (particles[id].position.x + grid_sphere_radius > half_width) {
		particles[id].position.x = half_width - grid_sphere_radius;
		particles[id].velocity.x *= -1.0 * damping_factor;
	}
	if (particles[id].position.x - grid_sphere_radius < -half_width) {
		particles[id].position.x = -half_width + grid_sphere_radius;
		particles[id].velocity.x *= -1.0 * damping_factor;
	}
	if (particles[id].position.y + grid_sphere_radius > half_height) {
		particles[id].position.y = half_height - grid_sphere_radius;
		particles[id].velocity.y *= -1.0 * damping_factor;
	}
	if (particles[id].position.y - grid_sphere_radius < -half_height) {
		particles[id].position.y = -half_height + grid_sphere_radius;
		particles[id].velocity.y *= -1.0 * damping_factor;
	}
	if (particles[id].position.z + grid_sphere_radius > half_depth) {
		particles[id].position.z = half_depth - grid_sphere_radius;
		particles[id].velocity.z *= -1.0 * damping_factor;
	}
	if (particles[id].position.z - grid_sphere_radius < -half_depth) {
		particles[id].position.z = -half_depth + grid_sphere_radius;
		particles[id].velocity.z *= -1.0 * damping_factor;
	}






	// Colour
	float speed = length(particles[id].velocity);

	speed /= 6.0;
	speed = clamp(speed, 0.0, 1.9);
	float part = mod(speed, 1.0);
	int speed_int = int(speed);

	colours[id].colour = mix(speedmap[speed_int].colour, speedmap[speed_int + 1].colour, part);
}
