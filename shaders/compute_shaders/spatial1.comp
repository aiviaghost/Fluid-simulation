#version 430 core

layout (local_size_x = 1024, local_size_y = 1, local_size_z = 1) in;

// ----------------------------------------------------------------------------
//
// uniforms
//
// ----------------------------------------------------------------------------

struct Particle {
	vec3 position;
	vec3 predicted_position;
	vec3 velocity;
};

layout(std430, binding = 0) buffer ParticleBuffer {
    Particle particles[];
};

layout(std430, binding = 3) buffer SpatialBuffer {
    ivec2 spatial[];
};

layout(std430, binding = 4) buffer StartBuffer {
    int start_inds[];
};

int PRIME1 = 86183;
int PRIME2 = 7475723;
int PRIME3 = 447409;
uniform int num_particles;
uniform float smoothing_radius;


// ----------------------------------------------------------------------------
//
// functions
//
// ----------------------------------------------------------------------------


int good_mod(int a, int m){
	if (a >= 0) return a % m;
	return (-(-a % m) + m) % m;
}

int point_to_hash(vec3 point){
	int x = int(point.x / smoothing_radius);
	int y = int(point.y / smoothing_radius);
	int z = int(point.z / smoothing_radius);
	int hash = x * PRIME1 + y * PRIME2 + z * PRIME3;
	return good_mod(hash, num_particles);
}

void main() {
	uint id = gl_GlobalInvocationID.x;
	spatial[id] = ivec2(point_to_hash(particles[id].predicted_position), id);
	start_inds[id] = -1;
}
